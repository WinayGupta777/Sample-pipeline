# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-push:
    name: Build and Push Image to Amazon ECR
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Set output variables
      id: const-output
      run: |
        echo "ECR_REPO_NAME=my-ecr-repo" >> $GITHUB_OUTPUT
        echo "ECS_CLUSTER_NAME=my-cluster" >> $GITHUB_OUTPUT
        echo "ECS_SERVICE_NAME=farget-service" >> $GITHUB_OUTPUT
        echo "APP_CONTAINER_PORT=80" >> $GITHUB_OUTPUT
        echo "APP_HOST_PORT=80" >> $GITHUB_OUTPUT
        echo "APP_NAME=demo-app" >> $GITHUB_OUTPUT


    - name: Checkout
      uses: actions/checkout@v3


    - name: Configure AWS Creds
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1


    - name: "[CloudFormation] Deploy VPC components"
      id: vpc-output
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: stack1
        template: Template/CreateVpcComponents.yml
        no-fail-on-empty-changeset: "1"
   

    - name: "[CloudFormation] Deploy ECR Repo"
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: stack2
        template: Template/CreateECR.yml
        no-fail-on-empty-changeset: "1"
        parameter-overrides: >-
          EcrRepoName=${{ steps.const-output.outputs.ECR_REPO_NAME }}


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: private


    - name: Build, tag, and push docker image to Amazon ECR
      id: uri-output
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ steps.const-output.outputs.ECR_REPO_NAME }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "ImageURI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


    - name: "[CloudFormation] Deploy ALB Things"
      id: alb-output
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: stack3
        template: Template/CreateALB.yml
        no-fail-on-empty-changeset: "1"
        parameter-overrides: >-
          myVpcId=${{ steps.vpc-output.outputs.vpcid }},
          mySubAId=${{ steps.vpc-output.outputs.subnetAId }},
          mySubBId=${{ steps.vpc-output.outputs.subnetBId }}


    - name: "[CloudFormation] Deploy ECS Cluster"
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: stack4
        template: Template/CreateECSCluster.yml
        no-fail-on-empty-changeset: "1"
        parameter-overrides: >-
          EcsClusterName=${{ steps.const-output.outputs.ECS_CLUSTER_NAME }},
          TaskExecutionArn=${{ secrets.TASK_EXECUTION_ARN }},
          EcsServiceName=${{ steps.const-output.outputs.ECS_SERVICE_NAME }},
          AppContainerPort=${{ steps.const-output.outputs.APP_CONTAINER_PORT }},
          AppHostPort=${{ steps.const-output.outputs.APP_HOST_PORT }},
          AppName=${{ steps.const-output.outputs.APP_NAME }},
          SecurityGroupId=${{ steps.alb-output.outputs.BoxSgId }},
          ContainerImage=${{ steps.uri-output.outputs.ImageURI }},
          myTargetGroup=${{ steps.alb-output.outputs.TargetGroupArn }},
          subnetAId=${{ steps.vpc-output.outputs.subnetAId }},
          subnetBId=${{ steps.vpc-output.outputs.subnetBId }}

    - name: "‚úÖ All Set Boss !!"
      run: |
        echo "Containers, magic boxes !! üéÅ"