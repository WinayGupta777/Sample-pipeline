# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-push:
    name: Build and Push Image to Amazon ECR
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Set environment name
      id: output-name
      run: |
        echo "ECR_REPO_NAME=my-ecr-repo" >> $GITHUB_OUTPUT


    - name: Checkout
      uses: actions/checkout@v3


    - name: Configure AWS Creds
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1


    - name: "[CloudFormation] Deploy ECR Repo"
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: FromActions
        template: Template/CreateECR.yml
        parameter-overrides: >-
          EcrRepoName=${{ steps.output-name.outputs.ECR_REPO_NAME }}


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: private

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ steps.output-name.outputs.ECR_REPO_NAME }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
